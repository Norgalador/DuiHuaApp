package com.duihua.chat.models;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import org.springframework.format.annotation.DateTimeFormat;

@Entity
@Table(name="profiles")
public class Profile {
    
	@Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @NotBlank(message="Please enter at least one language")
    @Size(min = 8, max = 100, message="Language name(s) must be between 3 and 100 characters")
    private String languagesSpoken;
    
    @NotBlank(message="Please enter at least one language")
    @Size(min = 8, max = 100, message="Language name(s) must be between 3 and 100 characters")
    private String languagesLearning;
    
    @Transient
    @NotBlank(message="Password confirmation is required.")
    @Size(min = 8, max = 100, message="Password confirmation must match password field")
    private String confirm;
    
    // This will not allow the createdAt column to be updated after creation
    @Column(updatable=false)
    @DateTimeFormat(pattern="yyyy-MM-dd")
    private Date createdAt;
    @DateTimeFormat(pattern="yyyy-MM-dd")
    private Date updatedAt;
    
    @PrePersist
    protected void onCreate(){
        this.createdAt = new Date();
    }
    @PreUpdate
    protected void onUpdate(){
        this.updatedAt = new Date();
    }
    
    // Relationship to other tables in the database
//    @OneToMany(mappedBy="user", fetch = FetchType.LAZY)
//    private List<Song> songs;
//   
//    @ManyToMany(fetch = FetchType.LAZY)
//    @JoinTable(
//    		name = "collaborations",
//    		joinColumns = @JoinColumn(name = "user_id"),
//    		inverseJoinColumns = @JoinColumn(name = "song_id")
//    		)
//    private List<Song> songCollaborated;
    
    //	Blank constructor
   
	
    //	Getters and setters
    
    
}